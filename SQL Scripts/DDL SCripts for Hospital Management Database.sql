CREATE DATABASE HOSPITAL_MANAGEMENT_V4


USE HOSPITAL_MANAGEMENT_V4

GO

/*SQL Script to create table structure for Hospital Admin*/
CREATE TABLE HOSPITAL_ADMIN
(
    ADMIN_ID INT NOT NULL IDENTITY(100,1),
    ADMIN_NAME VARCHAR(30) NOT NULL,
    CONTACT_NO BIGINT NOT NULL,
    EMAIL_ID VARCHAR(50) NOT NULL UNIQUE,
	CONSTRAINT HOSPITAL_ADMIN_PK PRIMARY KEY (ADMIN_ID)
);

GO

/*SQL Script to create table structure for PATIENT TABLE*/

CREATE TABLE PATIENT
(
    PATIENT_ID INT IDENTITY(5000,1) CONSTRAINT PATIENT_PK  PRIMARY KEY, -- primary key column
    FIRST_NAME VARCHAR(30) NOT NULL,
    MIDDLE_NAME VARCHAR(20),
    LAST_NAME VARCHAR(30) NOT NULL,
    DOB DATE NOT NULL ,
    WEIGHT INT CHECK(WEIGHT > 0), -- in pounds (lbs)
    HEIGHT INT CHECK(HEIGHT > 0), -- in centimeters (cm)
    GENDER VARCHAR(2) NOT NULL CHECK(gender IN ('M', 'F', 'NA')), -- assigned at birth
    STREET_NO INT NOT NULL,
    STREET_NAME VARCHAR(100) NOT NULL,
    CITY VARCHAR(30) NOT NULL,
    STATE_NAME CHAR(2) NOT NULL, -- Two letter abbreviation for stateName
    ZIP INT NOT NULL,
    PHONE_NO BIGINT  NOT NULL,
    EMAIL_ID VARBINARY(128) NULL,
	--ACCESS_ID VARBINARY (128) NOT NULL,
);

GO
--PROCEDURE FOR DROPPING AND CREATING NONCLUSTERED INDEX FOR PATIENT

IF EXISTS (SELECT NAME FROM SYS.INDEXES WHERE NAME ='IX_FULL_NAME')
	DROP INDEX IX_FULL_NAME ON dbo.PATIENT;
GO
CREATE NONCLUSTERED INDEX IX_FULL_NAME ON PATIENT (FIRST_NAME, MIDDLE_NAME, LAST_NAME ASC);
GO

/*COLUMN BASED ENCRYPTION FOR PATIENT EMAIL ID*/

CREATE MASTER KEY ENCRYPTION BY PASSWORD = 'GROUP07_PASSWORD';


CREATE CERTIFICATE GROUP07_CERTIFICATE
WITH SUBJECT = 'GROUP07 HOSPITAL MANAGEMENT',
EXPIRY_DATE= '2022-08-30';

CREATE SYMMETRIC KEY GROUP07_Symmetrickey
WITH ALGORITHM= AES_128
ENCRYPTION BY CERTIFICATE GROUP07_Certificate;
OPEN SYMMETRIC KEY
GROUP07_Symmetrickey
DECRYPTION BY CERTIFICATE GROUP07_CERTIFICATE;
 

GO  

/*SQL Script to create table structure for DEPARTMENT*/

CREATE TABLE DEPARTMENT
(
    DEPT_ID INT NOT NULL IDENTITY(3000,1),
    DEPT_NAME VARCHAR(100) NOT NULL,
    ADMIN_ID INT NOT NULL,
    CONSTRAINT DEPARTMENT_PK PRIMARY KEY(DEPT_ID),
    CONSTRAINT DEPARTMENT_FK FOREIGN KEY (ADMIN_ID) REFERENCES HOSPITAL_ADMIN(ADMIN_ID)
);

--NONCLUSTERED INDEX FOR DEPT
CREATE NONCLUSTERED INDEX IX_DEPTNAME ON DEPARTMENT (DEPT_NAME ASC);

/*SQL Script to create table structure for DOCTOR */
CREATE TABLE DOCTOR
(
    DOCTOR_ID INT NOT NULL IDENTITY(4000,1),
    DEPT_ID INT NOT NULL,
    FIRST_NAME VARCHAR(30) NOT NULL,
    MIDDLE_NAME VARCHAR(30),
    LAST_NAME VARCHAR(30) NOT NULL,
    PHONE_NO VARCHAR(10) NOT NULL,
    EMAIL_ID VARCHAR(50) UNIQUE NOT NULL,
    QUALIFICATION VARCHAR(30) NOT NULL,
    YEARS_OF_WORKING INT NOT NULL,
    OFFICE_ROOM VARCHAR(4) NOT NULL,
    CONSTRAINT DOCTOR_PK PRIMARY KEY(DOCTOR_ID),
    CONSTRAINT DOCTOR_FK FOREIGN KEY (DEPT_ID) REFERENCES DEPARTMENT(DEPT_ID)
);

GO

--NONCLUSTERED INDEX FOR DOCTOR
CREATE NONCLUSTERED INDEX IX_DOCTOR_NAME ON DOCTOR (FIRST_NAME ASC);

GO

/*SQL Script to create table structure for DOCTOR SCHEDULE*/
CREATE TABLE DOCTOR_SCHEDULE
(
    DOCSCHEDULE_ID INT NOT NULL IDENTITY(7000,1),
    SCHEDULE_DATE DATE,
    START_TIME TIME,
    END_TIME TIME,
    SCHEDULE_STATUS VARCHAR(20) DEFAULT 'Available' CHECK(SCHEDULE_STATUS IN ('Available','Cancelled')),
    DOCTOR_ID INT NOT NULL,
    CONSTRAINT DOCTOR_SCHEDULE_PK PRIMARY KEY(DOCSCHEDULE_ID),
    CONSTRAINT DOCTOR_ID FOREIGN KEY (DOCTOR_ID) REFERENCES DOCTOR(DOCTOR_ID)
);
GO 

/*SQL Script to create table structure for APPOINTMENT SCHEDULING*/

Create table APPOINTMENT_SCHEDULING 
(
	APPOINTMENT_ID int not null identity(1000,1),
	DOCSCHEDULE_ID int not null ,
	PATIENT_ID int not null ,
	ADMIN_ID int not null ,
	APPOINTMENT_DATE datetime not null,
	START_TIME TIME NOT NULL,
	END_TIME TIME NOT NULL,
	APPOINTMENT_STATUS varchar(30),
	APPOINTMENT_REASON VARCHAR(50),
	PATIENT_TYPE VARCHAR(1)
	Constraint Appointment_Scheduling_PK PRIMARY KEY (APPOINTMENT_ID),
	Constraint Appointment_Scheduling_FK1 FOREIGN KEY (DOCSCHEDULE_ID) REFERENCES Doctor_Schedule(DOCSCHEDULE_ID),
	Constraint Appointment_Scheduling_FK2 FOREIGN KEY (PATIENT_ID) REFERENCES Patient (PATIENT_ID),
	Constraint Appointment_Scheduling_FK3 FOREIGN KEY (ADMIN_ID) REFERENCES Hospital_Admin (ADMIN_ID)
);

GO

/*SQL Script to create table structure for Lab*/
CREATE TABLE LAB
(
    LAB_ID INT NOT NULL IDENTITY(8000,1),
    LAB_NAME VARCHAR(30) NOT NULL,
	LAB_TYPE VARCHAR(30) NOT NULL,
    LAB_DESCRIPTION VARCHAR(50) NOT NULL,
	ADMIN_ID INT NOT NULL,
    CONSTRAINT LAB_PK PRIMARY KEY (LAB_ID),
	CONSTRAINT LAB_FK FOREIGN KEY (ADMIN_ID) REFERENCES HOSPITAL_ADMIN(ADMIN_ID)
);

GO

/*SQL Script to create table structure for DOCTOR_LAB_ACCESS*/
CREATE TABLE DOCTOR_LAB_ACCESS
(
DOCTOR_ID INT NOT NULL,
LAB_ID INT NOT NULL,
SCOPE_AUTHORITY INT NOT NULL,
ACCESS_ID VARBINARY (128) NOT NULL,
PERMISSION_DATETIME DATETIME NOT NULL
CONSTRAINT DOCTOR_LAB_PK PRIMARY KEY (DOCTOR_ID,LAB_ID),
CONSTRAINT DOCTOR_LAB_FK1 FOREIGN KEY (DOCTOR_ID) REFERENCES DOCTOR(DOCTOR_ID),
CONSTRAINT DOCTOR_LAB_FK2 FOREIGN KEY (LAB_ID) REFERENCES LAB(LAB_ID)
);


GO

/*SQL Script to create table structure for BILLING*/
Create table BILLING
(
	BILLING_ID int not null identity (9000,1),
	BILLING_DATE date not null,
	PATIENT_ID int not null ,
	DOCTOR_FEES int not null,
	ROOM_CHARGES int not null,
	Constraint Billing_PK PRIMARY KEY (BILLING_ID),
	Constraint Billing_FK FOREIGN KEY (PATIENT_ID) REFERENCES Patient (PATIENT_ID)

);

/*SQL Script to create table structure for RECORD*/
CREATE TABLE RECORD
(    
    RECORD_ID INT PRIMARY KEY NOT NULL IDENTITY(10001,1),    
    DOCTOR_ID INT FOREIGN KEY (DOCTOR_ID) REFERENCES DOCTOR(DOCTOR_ID),    
    PATIENT_ID INT FOREIGN KEY (PATIENT_ID) REFERENCES PATIENT(PATIENT_ID),    
    ADMIT_DATE DATETIME,    
    DISCHARGEDATE DATETIME,    
    BILLING_ID INT NULL FOREIGN KEY (BILLING_ID) REFERENCES BILLING(BILLING_ID),    
    PATIENT_TYPE VARCHAR(1) CONSTRAINT CHK_SUBJECT CHECK (PATIENT_TYPE IN ('I', 'O')),
)

GO

/*SQL Script to create table structure for LAB REPORT*/
CREATE TABLE LAB_REPORT
(
LABREPORT_ID INT NOT NULL IDENTITY(12001,1),
LAB_ID INT NULL,
RECORD_ID INT NOT NULL,
RPTGENERATED_DTTM DATETIME NOT NULL
CONSTRAINT LABREPORT_PK PRIMARY KEY (LABREPORT_ID),
CONSTRAINT LAB_REPORT_FK1 FOREIGN KEY (LAB_ID) REFERENCES LAB(LAB_ID),
CONSTRAINT LAB_REPORT_FK2 FOREIGN KEY (RECORD_ID) REFERENCES RECORD(RECORD_ID)
);


GO


/*SQL Script to create table structure for PAYMENT*/
CREATE TABLE PAYMENT
(	
    PAYMENT_ID INT NOT NULL IDENTITY (11001,1),	
    PAYMENT_METHOD VARCHAR(30) NOT NULL,	
    PAYMENT_DATE_TIME DATETIME NOT NULL,	
    BILLING_ID INT NOT NULL,	
    CONSTRAINT PAYMENT_PK PRIMARY KEY (PAYMENT_ID),	
    CONSTRAINT PAYMENT_FK FOREIGN KEY (BILLING_ID) REFERENCES BILLING (BILLING_ID)	
);

GO

/*CREATING UDF'S*/

/* UDF  -- DATE DIFFERENCE*/
CREATE FUNCTION DateDifference(@x as date, @y as date)
RETURNS int
AS 
BEGIN
DECLARE @Days AS INT 
SET @Days = DATEDIFF(DY,@x,@y)
RETURN @Days
END

GO

/* UDF  -- TIME DIFFERENCE*/
CREATE FUNCTION TimeDifference(@x as DATETIME, @y as DATETIME)
RETURNS DECIMAL
AS 
BEGIN
DECLARE @HR AS DECIMAL 
SET @HR = DATEDIFF(HH,@x,@y)
RETURN @HR
END

GO

/* UDF MULTIPLY*/
CREATE FUNCTION Multiply(@x as int, @y as int)
RETURNS int
AS 
BEGIN
DECLARE @Billing_Amount AS INT 
SET @Billing_Amount = @x*@y
RETURN @Billing_Amount
END

GO

ALTER TABLE RECORD
ADD BILLINGFEE INT;

GO

CREATE FUNCTION CALCULATED_AGE(@DateOfBirth AS DATETIME)
RETURNS INT
AS
BEGIN
DECLARE @Years AS INT
DECLARE @BirthdayDate AS DATETIME
DECLARE @Age AS INT
--Calculate difference in years
SET @Years = DATEDIFF(YY,@DateOfBirth,GETDATE())
--Add years to DateOfBirth
SET @BirthdayDate = DATEADD(YY,@Years,@DateOfBirth)
--Subtract a year if birthday is after today
SET @Age = @Years -
CASE
WHEN @BirthdayDate>GETDATE() THEN 1
ELSE 0
END
--Return the result
RETURN @Age
END
go

/* UDF - CAlculate Age */
alter table PATIENT ADD Age as dbo.CALCULATED_AGE(patient.DOB)

go

/*CREATING STORED PROCEDURES*/

/* CALCULATE BILING DAYS -- STORED PROCEDURE */

CREATE PROCEDURE BillingDays
AS
BEGIN
    alter table Record ADD BillingDays as (dbo.DateDifference(RECORD.ADMIT_DATE, RECORD.DISCHARGEDATE))
END;

GO

exec BillingDays

GO

ALTER TABLE BILLING
ADD BILLINGFEE INT;

GO

/* CALCULATE INPATIENT BILLING FEE -- STORED PROCEDURE*/


CREATE PROCEDURE Calculate_IP_Billing
AS
BEGIN
     UPDATE Record SET BILLINGFEE = dbo.Multiply(100, dbo.DateDifference(RECORD.ADMIT_DATE, RECORD.DISCHARGEDATE)) WHERE
     PATIENT_TYPE = 'I'
END;

GO

exec Calculate_IP_Billing

GO

/* CALCULATE OUTPATIENT BILLING FEE -- STORED PROCEDURE*/

CREATE PROCEDURE Calculate_OP_Billing
AS
BEGIN
    UPDATE Record SET BILLINGFEE = dbo.Multiply(10, dbo.TimeDifference(RECORD.ADMIT_DATE, RECORD.DISCHARGEDATE)) WHERE
     PATIENT_TYPE = 'O'
END;

GO

exec Calculate_OP_Billing

GO

/* CALCULATE BILLING FEE STORED PROCEDURE*/

CREATE PROCEDURE Calculate_Billing
AS
BEGIN 
   
    IF EXISTS (SELECT Patient_Type from APPOINTMENT_SCHEDULING WHERE PATIENT_TYPE = 'I')
    Begin
            EXEC Calculate_IP_Billing
    End
    IF EXISTS (SELECT Patient_Type from APPOINTMENT_SCHEDULING WHERE PATIENT_TYPE = 'O')
    Begin
            EXEC Calculate_OP_Billing
    End
END

GO

EXEC Calculate_Billing

GO

--Enter the Doctor's First Name and Last Name to get the Doctor's Schedule
CREATE PROCEDURE GetDOCTORSHEDULE @FirstName VARCHAR(30), @Lastname VARCHAR(30) AS
BEGIN
    SELECT d.DOCTOR_ID, d.FIRST_NAME, d.LAST_NAME, ds.DOCSCHEDULE_ID, ds.SCHEDULE_DATE, ds.SCHEDULE_STATUS
    FROM Doctor d JOIN DOCTOR_SCHEDULE ds ON d.DOCTOR_ID = ds.DOCTOR_ID
    WHERE FIRST_NAME = @FirstName AND LAST_NAME = @Lastname
END;

GO

EXEC GetDOCTORSHEDULE 'Florentina','Homenick';

GO

-- Enter the department and the date, see all the available doctors.
CREATE PROCEDURE GetDOCTORAVAILABLE @SCHEDULE_DATE VARCHAR(30), @DEPARTMENT_NAME VARCHAR(30) AS
BEGIN
    SELECT d.DOCTOR_ID, d.FIRST_NAME,d.LAST_NAME, ds.DOCSCHEDULE_ID, ds.SCHEDULE_DATE, ds.SCHEDULE_STATUS,dp.DEPT_ID,dp.DEPT_NAME
    FROM DOCTOR d LEFT JOIN DOCTOR_SCHEDULE ds ON d.DOCTOR_ID = ds.DOCTOR_ID
                  LEFT JOIN DEPARTMENT dp ON d.DEPT_ID = dp.DEPT_ID
    WHERE ds.SCHEDULE_DATE = @SCHEDULE_DATE
    AND dp.DEPT_NAME = @DEPARTMENT_NAME
END;

GO

EXEC GetDOCTORAVAILABLE '2021-10-20','Gastroenterology';

GO

/*Creating Triggers*/

/*TRIGGER TO SEND MAIL TO PATIENT AFTER APPOINTMENT SCHEDULING*/

CREATE TRIGGER [dbo].[PATIENT_INSERT_Notification]
       ON [dbo].APPOINTMENT_SCHEDULING
AFTER INSERT
AS
BEGIN
       SET NOCOUNT ON;
 
       DECLARE @AppointmentID int
	   DECLARE @FirstName VARCHAR(30)
       DECLARE @MiddleName VARCHAR(20)
       DECLARE @LastName VARCHAR(30) 
	   DECLARE @DrFirstName VARCHAR(30)
       DECLARE @DrLastName VARCHAR(30)
	   DECLARE @PatientEmailID VARCHAR(50)
 
       SELECT @AppointmentID = APPOINTMENT_SCHEDULING.APPOINTMENT_ID,
	   @FirstName = PATIENT.FIRST_NAME,
	   @MiddleName = PATIENT.MIDDLE_NAME,
	   @LastName = PATIENT.LAST_NAME,
	   @PatientEmailID = PATIENT.EMAIL_ID,
	   @DrFirstName = DOCTOR.FIRST_NAME,
       @DrLastName = DOCTOR.LAST_NAME
       FROM APPOINTMENT_SCHEDULING JOIN PATIENT 
	   ON APPOINTMENT_SCHEDULING.PATIENT_ID = PATIENT.PATIENT_ID JOIN DOCTOR_SCHEDULE 
	   ON DOCTOR_SCHEDULE.DOCSCHEDULE_ID = APPOINTMENT_SCHEDULING.DOCSCHEDULE_ID JOIN DOCTOR
	   ON DOCTOR_SCHEDULE.DOCTOR_ID = DOCTOR.DOCTOR_ID

       declare @body varchar(500) = 'Appointment has been created with Appointment ID: ' + cast(@AppointmentID as VARCHAR(10)) 
	   + ' for Patient: ' + CAST(@FirstName AS VARCHAR(30)) + ' ' + CAST(@MiddleName AS VARCHAR(20)) + ' ' + CAST(@LastName AS VARCHAR(30))
	   + ' with Doctor: ' + CAST(@DrFirstName AS VARCHAR(30)) + ' ' + CAST(@DrLastName AS VARCHAR(30))
	   
	   EXEC msdb.dbo.sp_send_dbmail
            @profile_name = 'Hospital_Management_Admin_profile'
		   ,@recipients = @PatientEmailID
           ,@subject = 'Appointment has been created'
           ,@body = @body
           ,@importance ='HIGH'
END
GO

-- ONCE you INSERT DATA IN TABLE APPOINTMENT_SCHEDULING, It will form a new DATA in TABLE RECORD
GO
CREATE TRIGGER InsertRecord
    ON APPOINTMENT_SCHEDULING
    After INSERT
AS
BEGIN
    DECLARE @DOCSCHEDULE_ID INT
    DECLARE @DOCTOR_ID INT
    DECLARE @PATIENT_ID INT
    DECLARE @APPOINTMENT_DATE DATETIME
    DECLARE @PATIENT_TYPE VARCHAR(1)

    SELECT @DOCSCHEDULE_ID = DOCSCHEDULE_ID FROM inserted
    SELECT @DOCTOR_ID = DOCTOR_ID FROM DOCTOR_SCHEDULE WHERE DOCSCHEDULE_ID = @DOCSCHEDULE_ID
    SELECT @PATIENT_ID = PATIENT_ID FROM inserted
    SELECT @APPOINTMENT_DATE = APPOINTMENT_DATE FROM inserted
    SELECT @PATIENT_TYPE = PATIENT_TYPE FROM inserted

    Insert INTO RECORD(DOCTOR_ID,PATIENT_ID,ADMIT_DATE,PATIENT_TYPE) VALUES (@DOCTOR_ID, @PATIENT_ID, @APPOINTMENT_DATE, @PATIENT_TYPE)
END;

/*Once the data in DISCHARGEDATE changed, the Billing Table will insert new data
OUT PATIENT will not be charged, BILLINGFEE equals DOCTORE FEES
IN PATIENT will be added to the ROOM CHARGES - 100 per day, BILLINGFEE equals DOCTOR FEEs and ROOM CHARGES
 */
GO
CREATE TRIGGER INSERTBill
    ON Record
    AFTER UPDATE
AS
IF UPDATE(BILLINGFEE)
BEGIN
    DECLARE @PATIENT_ID INT
    DECLARE @DISCHARGEDATE DATE
    DECLARE @BILLINGFEE INT  
    DECLARE @PATIENT_TYPE VARCHAR(1)
    DECLARE @BillingDays INT

    SELECT @PATIENT_ID = PATIENT_ID FROM inserted
    SELECT @DISCHARGEDATE = DISCHARGEDATE FROM inserted
    SELECT @BILLINGFEE = BILLINGFEE FROM inserted
    SELECT @PATIENT_TYPE = PATIENT_TYPE FROM inserted
    SELECT @BillingDays = BillingDays FROM inserted

    IF (@PATIENT_TYPE = 'I')
    BEGIN
    INSERT into BILLING(BILLING_DATE,PATIENT_ID,DOCTOR_FEES,ROOM_CHARGES,BILLINGFEE) VALUES (@DISCHARGEDATE,@PATIENT_ID,@BILLINGFEE,100 * @BillingDays,@BILLINGFEE + 100 * @BillingDays)
    END
    ELSE IF(@PATIENT_TYPE = 'O')
    BEGIN
    INSERT into BILLING(BILLING_DATE,PATIENT_ID,DOCTOR_FEES,ROOM_CHARGES,BILLINGFEE) VALUES (@DISCHARGEDATE,@PATIENT_ID,@BILLINGFEE,0,@BILLINGFEE)
    END
END;

-- Once the BILLING table inserts data, the PAYMENT table will insert the new data and the RECORD table will update its data
GO
CREATE TRIGGER InsertP_UpdateR
    ON BILLING
    After INSERT
AS
BEGIN
    DECLARE @BILLING_ID INT
    DECLARE @PATIENT_ID INT

    SELECT @PATIENT_ID = PATIENT_ID FROM inserted
    SELECT @BILLING_ID = BILLING_ID FROM inserted

    INSERT INTO PAYMENT(PAYMENT_METHOD,PAYMENT_DATE_TIME,BILLING_ID) VALUES('Credit', GETDATE(),@BILLING_ID)

    UPDATE RECORD
    SET BILLING_ID = @BILLING_ID
    WHERE RECORD_ID = (SELECT TOP 1 RECORD_ID from RECORD 
                       WHERE PATIENT_ID = @PATIENT_ID
                       ORDER BY DISCHARGEDATE DESC)
END;

GO


-- If APPOINTMENT_STATUS is changed to 'CANCELED', the data in Record will be automatically deleted
CREATE TRIGGER DeleteRecord
    ON APPOINTMENT_SCHEDULING
    AFTER UPDATE
AS
BEGIN
IF Update(APPOINTMENT_STATUS)
    DECLARE @APPOINTMENT_STATUS VARCHAR(30)
    DECLARE @PATIENT_ID INT
    
    SELECT @APPOINTMENT_STATUS = APPOINTMENT_STATUS FROM inserted
    SELECT @PATIENT_ID = PATIENT_ID FROM inserted

    IF (@APPOINTMENT_STATUS = 'CANCELED')
    BEGIN 
    DELETE FROM RECORD WHERE RECORD.PATIENT_ID = @PATIENT_ID
    END
END;

GO

/* Trigger -- Record Insertion*/
CREATE TRIGGER [dbo].[RECORD_INSERTION]
       ON [dbo].APPOINTMENT_SCHEDULING
AFTER INSERT
AS
BEGIN
       SET NOCOUNT ON;
 
       DECLARE @PatientType VARCHAR(1)
	   DECLARE @DoctorID INT
       DECLARE @PatientID INT
       DECLARE @AdmitDate DATETIME
 
       SELECT @DoctorID = DS.DOCTOR_ID,
	   @PatientID = A.PATIENT_ID,
	   @AdmitDate = A.APPOINTMENT_DATE,
	   @PatientType = A.PATIENT_TYPE
       FROM APPOINTMENT_SCHEDULING A
         INNER JOIN DOCTOR_SCHEDULE DS ON DS.DOCSCHEDULE_ID = A.DOCSCHEDULE_ID
         INNER JOIN DOCTOR D ON D.DOCTOR_ID = DS.DOCTOR_ID

        BEGIN
        INSERT INTO RECORD(DOCTOR_ID, PATIENT_ID, ADMIT_DATE,PATIENT_TYPE) 
        VALUES(@DoctorID,@PatientID,@AdmitDate,@PatientType)
        END

END

GO


/* TRIGGER TO ADD LAB REPORT ID */


CREATE TRIGGER [DBO].REPORTGEN ON DBO.RECORD
AFTER INSERT
AS
BEGIN
SET NOCOUNT ON;
 
	   DECLARE @RECORDID INT
       DECLARE @GENDATE DATETIME
       DECLARE @PatientID INT
       
       
       SELECT @RECORDID = R.RECORD_ID,
       	@GENDATE = GETDATE()
        FROM RECORD R
        BEGIN
        INSERT INTO LAB_REPORT(RECORD_ID, RPTGENERATED_DTTM) 
        VALUES(@RECORDID,@GENDATE)
        END

END

GO

/*VIEWS*/

/*Create view for fetching out patient hospital details*/
CREATE VIEW PATIENT_HOSPITAL_DETAILS
AS
       SELECT P.PATIENT_ID,(P.FIRST_NAME +' '+ P.MIDDLE_NAME +' '+ P.LAST_NAME) AS PATIENT_NAME,
	   CASE WHEN A.PATIENT_TYPE= 'I' THEN 'In-Patient' 
	   WHEN A.PATIENT_TYPE = 'O' THEN 'Out-Patient' END AS PATIENT_TYPE, 
	   DR.DOCTOR_ID, (DR.FIRST_NAME +' '+ DR.MIDDLE_NAME +' '+ DR.LAST_NAME) AS DOCTOR_NAME,
	   DT.DEPT_ID, DT.DEPT_NAME
       FROM APPOINTMENT_SCHEDULING A JOIN PATIENT P
	   ON A.PATIENT_ID = P.PATIENT_ID JOIN DOCTOR_SCHEDULE DS 
	   ON A.DOCSCHEDULE_ID = DS.DOCSCHEDULE_ID JOIN DOCTOR DR
	   ON DS.DOCTOR_ID = DR.DOCTOR_ID JOIN DEPARTMENT DT
	   ON DT.DEPT_ID = DR.DEPT_ID;
GO

/*Create view for Doctor count as per Department*/
CREATE VIEW DEPARTMENT_DOCTOR_COUNT 
AS 
	   SELECT DT.DEPT_ID,DT.DEPT_NAME, COUNT(DR.DOCTOR_ID) AS TOTAL_DOCTORS
       FROM DOCTOR DR JOIN DEPARTMENT DT
	   ON DR.DEPT_ID = DT.DEPT_ID
	   GROUP BY DT.DEPT_ID, DT.DEPT_NAME;

GO 

/*Create view for Patient count as per Department*/
CREATE VIEW DEPARTMENT_PATIENT_COUNT 
AS 
	   SELECT DT.DEPT_ID,DT.DEPT_NAME, COUNT(P.PATIENT_ID) AS TOTAL_PATIENTS
       FROM APPOINTMENT_SCHEDULING A JOIN PATIENT P
	   ON A.PATIENT_ID = P.PATIENT_ID JOIN DOCTOR_SCHEDULE DS
	   ON DS.DOCSCHEDULE_ID = A.DOCSCHEDULE_ID JOIN DOCTOR DR
	   ON DS.DOCTOR_ID = DR.DOCTOR_ID JOIN DEPARTMENT DT
	   ON DR.DEPT_ID = DT.DEPT_ID
	   GROUP BY DT.DEPT_ID, DT.DEPT_NAME;

GO

/*Create view for Doctors Revenue*/
create view doctor_hospital_revenue
 as 
 select  D.FIRST_NAME,D.DOCTOR_ID, D.DEPT_ID,
         COUNT(BillingDays) AS DOCTOR_BILLING_DAYS, 
         sum(R.BillingDays*R.BILLINGFEE) as doctor_hospital_revenue, 
         COUNT(A.PATIENT_ID) as patient_count  
         from DOCTOR D
         INNER JOIN RECORD R ON R.DOCTOR_ID = D.DOCTOR_ID
         INNER JOIN DOCTOR_SCHEDULE DS ON DS.DOCTOR_ID = D.DOCTOR_ID
         INNER JOIN APPOINTMENT_SCHEDULING A ON A.DOCSCHEDULE_ID = DS.DOCSCHEDULE_ID
         GROUP by D.DEPT_ID, D.DOCTOR_ID,D.FIRST_NAME

GO

-- View All the Available scheduled appointment
CREATE VIEW ALL_AVAILABLE_APPOINTMENT AS
SELECT ds.DOCSCHEDULE_ID,  FIRST_NAME +' '+ LAST_NAME AS FULL_NAME,SCHEDULE_DATE,SCHEDULE_STATUS,dp.DEPT_NAME
FROM DOCTOR do JOIN DEPARTMENT dp ON do.DEPT_ID = dp.DEPT_ID
               JOIN DOCTOR_SCHEDULE ds ON do.DOCTOR_ID = ds.DOCTOR_ID
WHERE SCHEDULE_STATUS = 'Available'

GO


/* TRANSACTION */

BEGIN TRANSACTION InsertValues

DECLARE @insert_error INT
SET @insert_error = 0;

BEGIN TRY
    INSERT INTO DOCTOR_SCHEDULE VALUES('2021-12-20','09:00:00','10:00:00', 'Available',403000);
END TRY

BEGIN CATCH
Set @insert_error = @insert_error + 1
END CATCH

IF(@insert_error > 0)
    BEGIN
        ROLLBACK TRANSACTION InsertValues
        PRINT ('There are ' + convert(varchar(50), @insert_error) + 'pieces of data fail, roll back')
    END
ELSE
    BEGIN
        COMMIT TRANSACTION InsertValues
    END